/* Interface */
#define function totalSupply() view returns (uint256)
#define function balanceOf(address) view returns (uint256)
#define function transfer(address, uint256) nonpayable returns (bool)
#define function allowance(address, address) view returns (uint256)
#define function approve(address, uint256) nonpayable returns (bool)
#define function transferFrom(address, address, uint256) nonpayable returns (bool)
#define function mint(address, uint256) nonpayable returns (bool)

#define function name() view returns (string memory)
#define function symbol() view returns (string memory)
#define function decimals() view returns (uint8)

#define function minter() view returns (address)

/* Events */
#define event Transfer(address indexed, address indexed, uint256)
#define event Approval(address indexed, address indexed, uint256)

/* Storage Slots */
#define constant TOTAL_SUPPLY_LOC = 0x00
#define constant NAME_LOC = 0x01
#define constant SYMBOL_LOC = 0x02
#define constant BALANCES_LOC = 0x03
#define constant ALLOWANCES_LOC = 0x04
#define constant DECIMALS_LOC = 0x05
#define constant NAME_LEN_LOC = 0x06
#define constant SYMBOL_LEN_LOC = 0x07
#define constant MINTER_LOC = 0x08

#define constant UINT_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

// TODO: nonpayable

// args = (name, symbol, decimals, minter)
// WILL NOT WORK IF NAME OR SYMBOL OCCUPIES MORE THAN 32 BYTES
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // set name and symbol
    // each string is 3 wods
    // arguments are 3 + 3 + 1 + 1 = 8 words (0x0100 = 256 bytes)
    // find offset
    0x0100                  // [argsSize]
    0x0100 codesize sub     // [argsOffset, argsSize]
    0x00                    // [loc, argsOffset, argsSize]
    codecopy                // [] (args now in memory at 0x00)
    
    // set name (name at 6th word = 5 * 0x20 = 0xa0)
    0xa0 mload            // [name]
    [NAME_LOC] sstore       // []

    // name size at 5th word = 4 * 0x20 = 0x80
    0x80 mload            // [name_len]
    [NAME_LEN_LOC] sstore   // []

    // set symbol (symbol at 8th word = 7 * 0x20 = 0xe0)
    0xe0 mload            // [symbol]
    [SYMBOL_LOC] sstore     // []

    // symbol size at 7th word = 6 * 0x20 = 0xc0
    0xc0 mload            // [symbol_len]
    [SYMBOL_LEN_LOC] sstore // []

    // set decimals (3rd word = 2 * 0x20 = 0x40)
    0x40 mload              // [decimals]
    [DECIMALS_LOC] sstore   // []

    // set minter (4th word = 3 * 0x20 = 0x60)
    0x60 mload               // [minter]
    [MINTER_LOC] sstore      // []
}


/* Methods */
#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    RETURN_WORD(TOTAL_SUPPLY_LOC)
}

#define macro DECIMALS() = takes (0) returns (0) {
    RETURN_WORD(DECIMALS_LOC)
}

#define macro MINTER() = takes (0) returns (0) {
    RETURN_WORD(MINTER_LOC)
}

#define macro NAME() = takes (0) returns (0) {
    RETURN_STRING(NAME_LOC, NAME_LEN_LOC)
}

#define macro SYMBOL() = takes (0) returns (0) {
    RETURN_STRING(SYMBOL_LOC, SYMBOL_LEN_LOC)
}

#define macro BALANCE_OF() = takes (0) returns (0) {
    // get address from calldata
    0x04 calldataload           // [addr]


    // get balance
    GET_MAPPING(BALANCES_LOC)   // [balance]
    0x00 mstore
    0x20 0x00 return
}

#define macro ALLOWANCE() = takes(0) returns(0) {
    0x24 calldataload           // [spender]
    0x04 calldataload           // [owner, spender]
    GET_ALLOWANCE_MAPPING()     // [allowance]
    0x00 mstore
    0x20 0x00 return
}

#define macro MINT() = takes (0) returns (0) {
    // // get minter
    [MINTER_LOC] sload      // [minter]

    // get caller
    caller                  // [caller, minter]

    // check if caller is minter
    eq 0x01 sub             // [!isMinter]
    mint_fail jumpi         // []

    // // get to, cannot mint to zero address
    0x04 calldataload       // [to]
    dup1 0x00 eq            // [to == 0x0, to]
    mint_fail jumpi         // [to]

    // get amount
    0x24 calldataload       // [amount, to]

    // increase total supply
    [TOTAL_SUPPLY_LOC] sload    // [totalSupply, amount, to]
    dup1                        // [totalSupply, totalSupply, amount, to]
    dup3                        // [amount, totalSupply, totalSupply, amount, to]
    add                         // [totalSupply + amount, totalSupply, amount, to]
    dup2                        // [totalSupply, totalSupply + amount, totalSupply, amount, to]
    dup2                        // [totalSupply + amount, totalSupply, totalSupply + amount, totalSupply, amount, to]

    // check for overflow
    lt mint_fail jumpi          // [totalSupply + amount, totalSupply, amount, to]

    // update total supply
    [TOTAL_SUPPLY_LOC] sstore   // [totalSupply, amount, to]
    pop                         // [amount, to] TODO: can probably rework the dups up there to avoid this pop. save like 6 gas or something lol

    // increase balance
    dup2                        // [to, amount, to]
    GET_MAPPING(BALANCES_LOC)   // [balance, amount, to]
    add                         // [balance + amount, to]

    swap1                       // [to, balance + amount]
    SET_MAPPING(BALANCES_LOC)   // []


    0x01 0x00 mstore
    0x20 0x00 return

    mint_fail:
        0x00 0x00 revert
}

// TODO burn

#define macro APPROVE() = takes(0) returns(0) {
    0x24 calldataload   // [amt]
    0x04 calldataload   // [spender, amt]
    caller              // [caller, spender, amt]
    SET_ALLOWANCE_MAPPING() // []
    0x01 0x00 mstore
    0x20 0x00 return
}

#define macro TRANSFER() = takes(0) returns(0) {
    // first we need to get the current balance of msg.sender minus the amount
    // make sure it doesn't underflow
    // then we set the new balance of msg.sender

    0x24 calldataload           // [amt]
    caller                      // [caller, amt]
    GET_MAPPING(BALANCES_LOC)   // [balance, amt]
    dup2 dup2                   // [balance, amt, balance, amt]
    sub                         // [balance - amt, balance, amt]
    dup2 dup2                   // [balance - amt, balance, balance - amt, balance, amt]
    gt transfer_fail jumpi      // [balance - amt, balance, amt]

    caller                      // [caller, balance - amt, balance, amt]
    SET_MAPPING(BALANCES_LOC)   // [balance, amt]
    pop                         // [amt]

    // then we add amt to the balance of to

    0x04 calldataload dup1      // [to, to, amt]
    GET_MAPPING(BALANCES_LOC)   // [balance, to, amt]
    dup3                        // [amt, balance, to, amt]
    add                         // [balance + amt, to, amt]
    swap1                       // [to, balance + amt, amt]
    SET_MAPPING(BALANCES_LOC)   // [amt]

    0x01 0x00 mstore
    0x20 0x00 return

    transfer_fail:
        0x00 0x00 revert
}

// args: from, to, amt
#define macro TRANSFER_FROM() = takes(0) returns (0) {
    // get allowance
    // if it is not max, then subtract amt from it and check underflow

    // subtract from from, check underflow

    // add to to, do not check overflow

    caller                              // [spender]
    0x04 calldataload                   // [from, spender]

    GET_ALLOWANCE_MAPPING()             // [allowance]
    dup1                                // [allowance, allowance]

    [UINT_MAX] eq                       // [allowance = max, allowance]

    after_allowance_subtraction jumpi   // [allowance]

    0x44 calldataload                   // [amt, allowance]
    dup2                                // [allowance, amt, allowance]
    sub                                 // [allowance - amt, allowance]
    swap1                               // [allowance, allowance - amt]
    dup2                                // [allowance - amt, allowance, allowance - amt]
    gt transfer_from_fail jumpi         // [allowance - amt]

    caller 0x04 calldataload            // [from, spender, allowance - amt]
    SET_ALLOWANCE_MAPPING()             // []
    0x00                                // [0x00]

    after_allowance_subtraction:        // [trash]

        // subtract from
        pop                             // []
        0x44 calldataload               // [amt]
        0x04 calldataload               // [from, amt]
        GET_MAPPING(BALANCES_LOC)       // [balance, amt]
        swap1 dup2                      // [balance, amt, balance]
        sub                             // [balance - amt, balance]
        swap1 dup2                      // [balance - amt, balance, balance - amt]
        gt transfer_from_fail jumpi     // [balance - amt]

        0x04 calldataload               // [from, balance - amt]
        SET_MAPPING(BALANCES_LOC)       // []

        // add to
        0x44 calldataload               // [amt]
        0x24 calldataload               // [to, amt]
        GET_MAPPING(BALANCES_LOC)       // [balance, amt]
        add                             // [balance + amt]
        0x24 calldataload               // [to, balance + amt]
        SET_MAPPING(BALANCES_LOC)       // []

        // return
        0x01 0x00 mstore
        0x20 0x00 return

    transfer_from_fail:
        0x00 0x00 revert
}

#define macro SET_ALLOWANCE_MAPPING() = takes (3) returns (0) {
    // [owner, spender, amt]
    0x00 mstore                     // [spender, amt]
    [ALLOWANCES_LOC] 0x20 mstore    // [spender, amt]
    0x40 0x00 sha3                  // [innerMappingLoc, spender, amt]

    0x20 mstore                     // [spender, amt]
    0x00 mstore                     // [amt]
    0x40 0x00 sha3                  // [amtLoc, amt]
    sstore                          // []
}

#define macro GET_ALLOWANCE_MAPPING() = takes (2) returns (1) {
    // [owner, spender]
    0x00 mstore                     // [spender]
    [ALLOWANCES_LOC] 0x20 mstore    // [spender]
    0x40 0x00 sha3                  // [innerMappingLoc, spender]

    0x20 mstore                     // [spender]
    0x00 mstore                     // []
    0x40 0x00 sha3                  // [amtLoc]
    sload                           // [amt]
}

#define macro SET_MAPPING(MAP_LOC) = takes (2) returns (0) {
    // [key, val]
    0x00 mstore             // [val]
    <MAP_LOC> 0x20 mstore   // [val]

    // memory is now [key, MAP_LOC]
    // keccak it to get the final storage location
    
    0x40 0x00 sha3          // [storageLoc, val]
    sstore                  // []
}

#define macro GET_MAPPING(MAP_LOC) = takes (1) returns (1) {
    // [key]
    0x00 mstore             // []
    <MAP_LOC> 0x20 mstore   // []

    // memory is now [key, MAP_LOC]
    // keccak it to get the final storage location
    
    0x40 0x00 sha3          // [storageLoc]
    sload                   // [val]
}

#define macro RETURN_STRING(DATA_LOC, LEN_LOC) = takes (0) returns (0) {
    <DATA_LOC> sload        // [data]
    <LEN_LOC> sload         // [len, data]
    0x20                    // [0x20, len, data]

    // write to memory
    0x00 mstore             // [len, data]
    0x20 mstore             // [data]
    0x40 mstore             // []

    0x60 0x00 return
}

#define macro RETURN_WORD(WORD) = takes (0) returns (0) {
    <WORD> sload            // [word]
    0x00 mstore             // []
    0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    
    dup1 __FUNC_SIG(transfer) eq _transfer jumpi
    dup1 __FUNC_SIG(transferFrom) eq _transferFrom jumpi
    dup1 __FUNC_SIG(approve) eq _approve jumpi
    dup1 __FUNC_SIG(mint) eq _mint jumpi
    
    dup1 __FUNC_SIG(balanceOf) eq _balanceOf jumpi
    dup1 __FUNC_SIG(allowance) eq _allowance jumpi
    dup1 __FUNC_SIG(totalSupply) eq _totalSupply jumpi
    dup1 __FUNC_SIG(decimals) eq _decimals jumpi
    dup1 __FUNC_SIG(name) eq _name jumpi
    dup1 __FUNC_SIG(symbol) eq _symbol jumpi
    dup1 __FUNC_SIG(minter) eq _minter jumpi

    0x00 0x00 revert

    _totalSupply:
        TOTAL_SUPPLY()
    _name:
        NAME()
    _symbol:
        SYMBOL()
    _decimals:
        DECIMALS()
    _balanceOf:
        BALANCE_OF()
    _minter:
        MINTER()
    _allowance:
        ALLOWANCE()

    _approve:
        APPROVE()
    _mint:
        MINT()
    _transfer:
        TRANSFER()
    _transferFrom:
        TRANSFER_FROM()
}